type token =
  | INT of (int)
  | ID of (string)
  | ASSIGN
  | STAR
  | SEMICOLON
  | IF
  | REPEAT
  | PLUS
  | MINUS
  | AMPER
  | EOF
  | READINT
  | LPAREN
  | RPAREN

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
# 21 "parser.ml"
let yytransl_const = [|
  259 (* ASSIGN *);
  260 (* STAR *);
  261 (* SEMICOLON *);
  262 (* IF *);
  263 (* REPEAT *);
  264 (* PLUS *);
  265 (* MINUS *);
  266 (* AMPER *);
    0 (* EOF *);
  267 (* READINT *);
  268 (* LPAREN *);
  269 (* RPAREN *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\000\000"

let yylen = "\002\000\
\002\000\003\000\003\000\004\000\003\000\004\000\003\000\001\000\
\003\000\003\000\002\000\001\000\002\000\002\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\
\000\000\000\000\000\000\008\000\012\000\000\000\000\000\000\000\
\015\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\
\000\000\013\000\011\000\014\000\000\000\000\000\000\000\000\000\
\002\000\005\000\000\000\009\000\010\000\006\000"

let yydgoto = "\002\000\
\008\000\009\000\019\000"

let yysindex = "\002\000\
\063\255\000\000\006\255\011\255\036\255\063\255\063\255\000\000\
\004\000\036\255\012\255\000\000\000\000\017\255\036\255\018\255\
\000\000\036\255\047\255\024\255\251\254\063\255\000\000\015\255\
\036\255\000\000\000\000\000\000\003\255\036\255\056\255\015\255\
\000\000\000\000\015\255\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\000\
\000\000\000\000\027\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\255\255\248\255"

let yytablesize = 296
let yytable = "\022\000\
\003\000\024\000\001\000\023\000\020\000\021\000\027\000\033\000\
\010\000\029\000\030\000\032\000\011\000\007\000\025\000\036\000\
\035\000\031\000\026\000\028\000\034\000\037\000\030\000\000\000\
\012\000\013\000\004\000\014\000\022\000\038\000\000\000\000\000\
\015\000\016\000\017\000\018\000\012\000\013\000\000\000\014\000\
\000\000\000\000\000\000\000\000\015\000\016\000\017\000\018\000\
\003\000\000\000\004\000\000\000\005\000\006\000\030\000\000\000\
\000\000\003\000\007\000\004\000\022\000\005\000\006\000\000\000\
\003\000\000\000\004\000\007\000\005\000\006\000\000\000\000\000\
\000\000\000\000\007\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\003\000\003\000\000\000\003\000\003\000\003\000\003\000\
\022\000\003\000\003\000\003\000\003\000\003\000\007\000\007\000\
\000\000\007\000\007\000\007\000\007\000\000\000\007\000\007\000\
\007\000\007\000\007\000\004\000\004\000\000\000\004\000\004\000\
\004\000\004\000\000\000\004\000\004\000\004\000\004\000\004\000"

let yycheck = "\005\001\
\000\000\010\000\001\000\000\000\006\000\007\000\015\000\013\001\
\003\001\018\000\008\001\020\000\002\001\000\000\003\001\013\001\
\025\000\019\000\002\001\002\001\022\000\030\000\008\001\255\255\
\001\001\002\001\000\000\004\001\005\001\031\000\255\255\255\255\
\009\001\010\001\011\001\012\001\001\001\002\001\255\255\004\001\
\255\255\255\255\255\255\255\255\009\001\010\001\011\001\012\001\
\002\001\255\255\004\001\255\255\006\001\007\001\008\001\255\255\
\255\255\002\001\012\001\004\001\005\001\006\001\007\001\255\255\
\002\001\255\255\004\001\012\001\006\001\007\001\255\255\255\255\
\255\255\255\255\012\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\255\255\004\001\005\001\006\001\007\001\
\005\001\009\001\010\001\011\001\012\001\013\001\001\001\002\001\
\255\255\004\001\005\001\006\001\007\001\255\255\009\001\010\001\
\011\001\012\001\013\001\001\001\002\001\255\255\004\001\005\001\
\006\001\007\001\255\255\009\001\010\001\011\001\012\001\013\001"

let yynames_const = "\
  ASSIGN\000\
  STAR\000\
  SEMICOLON\000\
  IF\000\
  REPEAT\000\
  PLUS\000\
  MINUS\000\
  AMPER\000\
  EOF\000\
  READINT\000\
  LPAREN\000\
  RPAREN\000\
  "

let yynames_block = "\
  INT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Program.cmd) in
    Obj.repr(
# 17 "parser.mly"
        ( _1 )
# 183 "parser.ml"
               : Program.cmd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Program.cmd) in
    Obj.repr(
# 20 "parser.mly"
                    ( _2 )
# 190 "parser.ml"
               : Program.cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Program.exp) in
    Obj.repr(
# 21 "parser.mly"
                 ( Program.ASSIGN(_1, _3) )
# 198 "parser.ml"
               : Program.cmd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Program.exp) in
    Obj.repr(
# 22 "parser.mly"
                      ( Program.PTRASSIGN(_2, _4) )
# 206 "parser.ml"
               : Program.cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Program.cmd) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Program.cmd) in
    Obj.repr(
# 23 "parser.mly"
                    ( Program.SEQ(_1, _3) )
# 214 "parser.ml"
               : Program.cmd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Program.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Program.cmd) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Program.cmd) in
    Obj.repr(
# 24 "parser.mly"
                  ( Program.IF(_2, _3, _4) )
# 223 "parser.ml"
               : Program.cmd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Program.cmd) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Program.exp) in
    Obj.repr(
# 25 "parser.mly"
                  ( Program.REPEAT(_2, _3) )
# 231 "parser.ml"
               : Program.cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 28 "parser.mly"
      ( Program.NUM _1 )
# 238 "parser.ml"
               : Program.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Program.exp) in
    Obj.repr(
# 29 "parser.mly"
                     ( _2 )
# 245 "parser.ml"
               : Program.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Program.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Program.exp) in
    Obj.repr(
# 30 "parser.mly"
                 ( Program.ADD(_1, _3) )
# 253 "parser.ml"
               : Program.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Program.exp) in
    Obj.repr(
# 31 "parser.mly"
             ( Program.NEG(_2) )
# 260 "parser.ml"
               : Program.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 32 "parser.mly"
     ( Program.VAR _1 )
# 267 "parser.ml"
               : Program.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 33 "parser.mly"
          ( Program.DEREF _2 )
# 274 "parser.ml"
               : Program.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 34 "parser.mly"
           ( Program.LOC _2 )
# 281 "parser.ml"
               : Program.exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 35 "parser.mly"
          ( Program.READINT )
# 287 "parser.ml"
               : Program.exp))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Program.cmd)
